{"ast":null,"code":"var _jsxFileName = \"/Users/sancaf/Desktop/carpeta sin ti\\u0301tulo/Challenge_React/src/components/ListOfMovies.jsx\",\n  _s = $RefreshSig$();\nimport { useInfiniteQuery } from 'react-query';\nimport { useState, useContext } from 'react';\nimport styled from 'styled-components';\nimport React, { useRef, useCallback } from 'react';\nimport MovieModal from './MovieModal';\nimport { SearchContext } from '../context/SearchContextProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListOfMovies() {\n  _s();\n  var _data$pages;\n  const {\n    searchQuery,\n    searchType\n  } = useContext(SearchContext);\n  const API_KEY = 'ba282fc7777a85594b4d09bffedbb258';\n  const IMAGE_PATH = 'https://image.tmdb.org/t/p/w500';\n  const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchQuery}`;\n  const favorites = Object.values(JSON.parse(localStorage.getItem('favorites') || '{}'));\n  const fetchData = async function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const config = {\n      discover: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&page=${page}`,\n      popularity: `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`,\n      votes: `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US&page=${page}`,\n      date: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&page=${page}`,\n      textQuery: API_URL + `&page=${page}`\n    };\n    const path = config[searchType];\n    if (!path) return;\n    const res = await fetch(path);\n    return res.json();\n  };\n  const {\n    isLoading,\n    error,\n    data,\n    fetchNextPage,\n    hasNextPage\n  } = useInfiniteQuery('movies', fetchData, {\n    getNextPageParam: (lastPage, allPages) => {\n      if (lastPage.page < lastPage.total_pages) {\n        return lastPage.page + 1;\n      }\n    }\n  });\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const handleCardClick = movie => {\n    setSelectedMovie(movie);\n  };\n  const movies = searchType === 'favourites' ? favorites : (data === null || data === void 0 ? void 0 : (_data$pages = data.pages) === null || _data$pages === void 0 ? void 0 : _data$pages.flatMap(page => page.results)) || [];\n  const observer = useRef();\n  const lastMovieRef = useCallback(node => {\n    if (isLoading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasNextPage) {\n        fetchNextPage();\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [isLoading, hasNextPage, fetchNextPage]);\n  return /*#__PURE__*/_jsxDEV(Deck, {\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), movies.map(movie => /*#__PURE__*/_jsxDEV(Card, {\n      onClick: () => handleCardClick(movie),\n      ref: lastMovieRef,\n      children: [/*#__PURE__*/_jsxDEV(Poster, {\n        src: IMAGE_PATH + movie.poster_path,\n        alt: movie.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Title, {\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, movie.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)), selectedMovie && /*#__PURE__*/_jsxDEV(MovieModal, {\n      selectedMovie: selectedMovie,\n      onClose: () => setSelectedMovie(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(ListOfMovies, \"YApBNNEn30RhrFMeTMxfA0Dqw6k=\", false, function () {\n  return [useInfiniteQuery];\n});\n_c = ListOfMovies;\nconst Deck = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1em;\n  padding: 1em;\n`;\n_c2 = Deck;\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  border-radius: 8px;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  width: 250px;\n  cursor: pointer;\n  &:hover {\n    scale: 1.05;\n    transition: 0.3s;\n  }\n`;\n_c3 = Card;\nconst Poster = styled.img`\n  object-fit: cover;\n`;\n_c4 = Poster;\nconst CardContent = styled.div`\n  padding: 0.5em;\n  height: 15%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n_c5 = CardContent;\nconst Title = styled.h2`\n  font-size: 20px;\n  font-weight: bold;\n  margin: 0;\n  margin-bottom: 4px;\n`;\n_c6 = Title;\nexport default ListOfMovies;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"ListOfMovies\");\n$RefreshReg$(_c2, \"Deck\");\n$RefreshReg$(_c3, \"Card\");\n$RefreshReg$(_c4, \"Poster\");\n$RefreshReg$(_c5, \"CardContent\");\n$RefreshReg$(_c6, \"Title\");","map":{"version":3,"names":["useInfiniteQuery","useState","useContext","styled","React","useRef","useCallback","MovieModal","SearchContext","jsxDEV","_jsxDEV","ListOfMovies","_s","_data$pages","searchQuery","searchType","API_KEY","IMAGE_PATH","API_URL","favorites","Object","values","JSON","parse","localStorage","getItem","fetchData","page","arguments","length","undefined","config","discover","popularity","votes","date","textQuery","path","res","fetch","json","isLoading","error","data","fetchNextPage","hasNextPage","getNextPageParam","lastPage","allPages","total_pages","selectedMovie","setSelectedMovie","handleCardClick","movie","movies","pages","flatMap","results","observer","lastMovieRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","Deck","children","fileName","_jsxFileName","lineNumber","columnNumber","map","Card","onClick","ref","Poster","src","poster_path","alt","title","CardContent","Title","id","onClose","_c","div","_c2","_c3","img","_c4","_c5","h2","_c6","$RefreshReg$"],"sources":["/Users/sancaf/Desktop/carpeta sin título/Challenge_React/src/components/ListOfMovies.jsx"],"sourcesContent":["import { useInfiniteQuery } from 'react-query'\nimport { useState, useContext } from 'react'\nimport styled from 'styled-components'\nimport React, { useRef, useCallback } from 'react'\nimport MovieModal from './MovieModal'\nimport { SearchContext } from '../context/SearchContextProvider'\n\nfunction ListOfMovies() {\n  const { searchQuery, searchType } = useContext(SearchContext)\n\n  const API_KEY = 'ba282fc7777a85594b4d09bffedbb258'\n\n  const IMAGE_PATH = 'https://image.tmdb.org/t/p/w500'\n  const API_URL = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchQuery}`\n\n  const favorites = Object.values(\n    JSON.parse(localStorage.getItem('favorites') || '{}')\n  )\n\n  const fetchData = async (page = 1) => {\n    const config = {\n      discover: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&language=en-US&page=${page}`,\n      popularity: `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${page}`,\n      votes: `https://api.themoviedb.org/3/movie/top_rated?api_key=${API_KEY}&language=en-US&page=${page}`,\n      date: `https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&page=${page}`,\n      textQuery: API_URL + `&page=${page}`,\n    }\n\n    const path = config[searchType]\n    if (!path) return\n    const res = await fetch(path)\n    return res.json()\n  }\n\n  const { isLoading, error, data, fetchNextPage, hasNextPage } =\n    useInfiniteQuery('movies', fetchData, {\n      getNextPageParam: (lastPage, allPages) => {\n        if (lastPage.page < lastPage.total_pages) {\n          return lastPage.page + 1\n        }\n      },\n    })\n\n  const [selectedMovie, setSelectedMovie] = useState(null)\n\n  const handleCardClick = (movie) => {\n    setSelectedMovie(movie)\n  }\n\n  const movies =\n    searchType === 'favourites'\n      ? favorites\n      : data?.pages?.flatMap((page) => page.results) || []\n\n  const observer = useRef()\n  const lastMovieRef = useCallback(\n    (node) => {\n      if (isLoading) return\n      if (observer.current) observer.current.disconnect()\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && hasNextPage) {\n          fetchNextPage()\n        }\n      })\n      if (node) observer.current.observe(node)\n    },\n    [isLoading, hasNextPage, fetchNextPage]\n  )\n  return (\n    <Deck>\n      {isLoading && <div>Loading...</div>}\n      {error && <div>Error fetching data</div>}\n      {movies.map((movie) => (\n        <Card\n          key={movie.id}\n          onClick={() => handleCardClick(movie)}\n          ref={lastMovieRef}\n        >\n          <Poster src={IMAGE_PATH + movie.poster_path} alt={movie.title} />\n          <CardContent>\n            <Title>{movie.title}</Title>\n          </CardContent>\n        </Card>\n      ))}\n      {selectedMovie && (\n        <MovieModal\n          selectedMovie={selectedMovie}\n          onClose={() => setSelectedMovie(null)}\n        />\n      )}\n    </Deck>\n  )\n}\n\nconst Deck = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 1em;\n  padding: 1em;\n`\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  border-radius: 8px;\n  background-color: #fff;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  width: 250px;\n  cursor: pointer;\n  &:hover {\n    scale: 1.05;\n    transition: 0.3s;\n  }\n`\n\nconst Poster = styled.img`\n  object-fit: cover;\n`\n\nconst CardContent = styled.div`\n  padding: 0.5em;\n  height: 15%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Title = styled.h2`\n  font-size: 20px;\n  font-weight: bold;\n  margin: 0;\n  margin-bottom: 4px;\n`\n\nexport default ListOfMovies\n"],"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,KAAK,IAAIC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,aAAa,QAAQ,kCAAkC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhE,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,WAAA;EACtB,MAAM;IAAEC,WAAW;IAAEC;EAAW,CAAC,GAAGb,UAAU,CAACM,aAAa,CAAC;EAE7D,MAAMQ,OAAO,GAAG,kCAAkC;EAElD,MAAMC,UAAU,GAAG,iCAAiC;EACpD,MAAMC,OAAO,GAAI,qDAAoDF,OAAQ,UAASF,WAAY,EAAC;EAEnG,MAAMK,SAAS,GAAGC,MAAM,CAACC,MAAM,CAC7BC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI,CACtD,CAAC;EAED,MAAMC,SAAS,GAAG,eAAAA,CAAA,EAAoB;IAAA,IAAbC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAC/B,MAAMG,MAAM,GAAG;MACbC,QAAQ,EAAG,uDAAsDhB,OAAQ,wBAAuBW,IAAK,EAAC;MACtGM,UAAU,EAAG,sDAAqDjB,OAAQ,wBAAuBW,IAAK,EAAC;MACvGO,KAAK,EAAG,wDAAuDlB,OAAQ,wBAAuBW,IAAK,EAAC;MACpGQ,IAAI,EAAG,uDAAsDnB,OAAQ,SAAQW,IAAK,EAAC;MACnFS,SAAS,EAAElB,OAAO,GAAI,SAAQS,IAAK;IACrC,CAAC;IAED,MAAMU,IAAI,GAAGN,MAAM,CAAChB,UAAU,CAAC;IAC/B,IAAI,CAACsB,IAAI,EAAE;IACX,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAACF,IAAI,CAAC;IAC7B,OAAOC,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB,CAAC;EAED,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC,IAAI;IAAEC,aAAa;IAAEC;EAAY,CAAC,GAC1D7C,gBAAgB,CAAC,QAAQ,EAAE0B,SAAS,EAAE;IACpCoB,gBAAgB,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;MACxC,IAAID,QAAQ,CAACpB,IAAI,GAAGoB,QAAQ,CAACE,WAAW,EAAE;QACxC,OAAOF,QAAQ,CAACpB,IAAI,GAAG,CAAC;MAC1B;IACF;EACF,CAAC,CAAC;EAEJ,MAAM,CAACuB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMmD,eAAe,GAAIC,KAAK,IAAK;IACjCF,gBAAgB,CAACE,KAAK,CAAC;EACzB,CAAC;EAED,MAAMC,MAAM,GACVvC,UAAU,KAAK,YAAY,GACvBI,SAAS,GACT,CAAAwB,IAAI,aAAJA,IAAI,wBAAA9B,WAAA,GAAJ8B,IAAI,CAAEY,KAAK,cAAA1C,WAAA,uBAAXA,WAAA,CAAa2C,OAAO,CAAE7B,IAAI,IAAKA,IAAI,CAAC8B,OAAO,CAAC,KAAI,EAAE;EAExD,MAAMC,QAAQ,GAAGrD,MAAM,CAAC,CAAC;EACzB,MAAMsD,YAAY,GAAGrD,WAAW,CAC7BsD,IAAI,IAAK;IACR,IAAInB,SAAS,EAAE;IACf,IAAIiB,QAAQ,CAACG,OAAO,EAAEH,QAAQ,CAACG,OAAO,CAACC,UAAU,CAAC,CAAC;IACnDJ,QAAQ,CAACG,OAAO,GAAG,IAAIE,oBAAoB,CAAEC,OAAO,IAAK;MACvD,IAAIA,OAAO,CAAC,CAAC,CAAC,CAACC,cAAc,IAAIpB,WAAW,EAAE;QAC5CD,aAAa,CAAC,CAAC;MACjB;IACF,CAAC,CAAC;IACF,IAAIgB,IAAI,EAAEF,QAAQ,CAACG,OAAO,CAACK,OAAO,CAACN,IAAI,CAAC;EAC1C,CAAC,EACD,CAACnB,SAAS,EAAEI,WAAW,EAAED,aAAa,CACxC,CAAC;EACD,oBACElC,OAAA,CAACyD,IAAI;IAAAC,QAAA,GACF3B,SAAS,iBAAI/B,OAAA;MAAA0D,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAClC9B,KAAK,iBAAIhC,OAAA;MAAA0D,QAAA,EAAK;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACvClB,MAAM,CAACmB,GAAG,CAAEpB,KAAK,iBAChB3C,OAAA,CAACgE,IAAI;MAEHC,OAAO,EAAEA,CAAA,KAAMvB,eAAe,CAACC,KAAK,CAAE;MACtCuB,GAAG,EAAEjB,YAAa;MAAAS,QAAA,gBAElB1D,OAAA,CAACmE,MAAM;QAACC,GAAG,EAAE7D,UAAU,GAAGoC,KAAK,CAAC0B,WAAY;QAACC,GAAG,EAAE3B,KAAK,CAAC4B;MAAM;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjE9D,OAAA,CAACwE,WAAW;QAAAd,QAAA,eACV1D,OAAA,CAACyE,KAAK;UAAAf,QAAA,EAAEf,KAAK,CAAC4B;QAAK;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC;IAAA,GAPTnB,KAAK,CAAC+B,EAAE;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQT,CACP,CAAC,EACDtB,aAAa,iBACZxC,OAAA,CAACH,UAAU;MACT2C,aAAa,EAAEA,aAAc;MAC7BmC,OAAO,EAAEA,CAAA,KAAMlC,gBAAgB,CAAC,IAAI;IAAE;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEX;AAAC5D,EAAA,CArFQD,YAAY;EAAA,QA4BjBX,gBAAgB;AAAA;AAAAsF,EAAA,GA5BX3E,YAAY;AAuFrB,MAAMwD,IAAI,GAAGhE,MAAM,CAACoF,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA,CAAC;AAAAC,GAAA,GANKrB,IAAI;AAOV,MAAMO,IAAI,GAAGvE,MAAM,CAACoF,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAAE,GAAA,GAbKf,IAAI;AAeV,MAAMG,MAAM,GAAG1E,MAAM,CAACuF,GAAI;AAC1B;AACA,CAAC;AAAAC,GAAA,GAFKd,MAAM;AAIZ,MAAMK,WAAW,GAAG/E,MAAM,CAACoF,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,CAAC;AAAAK,GAAA,GANKV,WAAW;AAQjB,MAAMC,KAAK,GAAGhF,MAAM,CAAC0F,EAAG;AACxB;AACA;AACA;AACA;AACA,CAAC;AAAAC,GAAA,GALKX,KAAK;AAOX,eAAexE,YAAY;AAAA,IAAA2E,EAAA,EAAAE,GAAA,EAAAC,GAAA,EAAAE,GAAA,EAAAC,GAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAP,GAAA;AAAAO,YAAA,CAAAN,GAAA;AAAAM,YAAA,CAAAJ,GAAA;AAAAI,YAAA,CAAAH,GAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}